{
  "Comment": "Production-ready E-commerce data pipeline with comprehensive error handling and notifications",
  "StartAt": "ValidateData",
  "States": {
    "ValidateData": {
      "Type": "Task",
      "Resource": "arn:aws:states:::ecs:runTask.sync",
      "Parameters": {
        "LaunchType": "FARGATE",
        "Cluster": "ecommerce-data-pipeline-cluster",
        "TaskDefinition": "ecommerce-validation-task",
        "NetworkConfiguration": {
          "AwsvpcConfiguration": {
            "Subnets": [
              "subnet-07714d8205ca8b03f",
              "subnet-093942cd3e5e4df00"
            ],
            "SecurityGroups": [
              "sg-01227b8bb88635f5a"
            ],
            "AssignPublicIp": "ENABLED"
          }
        },
        "Overrides": {
          "ContainerOverrides": [
            {
              "Name": "validation-container",
              "Environment": [
                {
                  "Name": "PRODUCTS_FILES",
                  "Value.$": "States.JsonToString($.products_files)"
                },
                {
                  "Name": "ORDERS_FILES",
                  "Value.$": "States.JsonToString($.orders_files)"
                },
                {
                  "Name": "ORDER_ITEMS_FILES",
                  "Value.$": "States.JsonToString($.order_items_files)"
                },
                {
                  "Name": "BATCH_ID",
                  "Value.$": "$.batch_id"
                }
              ]
            }
          ]
        }
      },
      "ResultPath": "$.validation_result",
      "TimeoutSeconds": 1800,
      "Retry": [
        {
          "ErrorEquals": [
            "States.TaskFailed"
          ],
          "IntervalSeconds": 30,
          "MaxAttempts": 2,
          "BackoffRate": 2
        },
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "IntervalSeconds": 5,
          "MaxAttempts": 1
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "Next": "NotifyValidationFailure",
          "ResultPath": "$.error"
        }
      ],
      "Next": "TransformData"
    },
    "TransformData": {
      "Type": "Task",
      "Resource": "arn:aws:states:::ecs:runTask.sync",
      "Parameters": {
        "LaunchType": "FARGATE",
        "Cluster": "ecommerce-data-pipeline-cluster",
        "TaskDefinition": "ecommerce-transformation-task",
        "NetworkConfiguration": {
          "AwsvpcConfiguration": {
            "Subnets": [
              "subnet-07714d8205ca8b03f",
              "subnet-093942cd3e5e4df00"
            ],
            "SecurityGroups": [
              "sg-01227b8bb88635f5a"
            ],
            "AssignPublicIp": "ENABLED"
          }
        },
        "Overrides": {
          "ContainerOverrides": [
            {
              "Name": "transformation-container",
              "Environment": [
                {
                  "Name": "PRODUCTS_FILES",
                  "Value.$": "States.JsonToString($.products_files)"
                },
                {
                  "Name": "ORDERS_FILES",
                  "Value.$": "States.JsonToString($.orders_files)"
                },
                {
                  "Name": "ORDER_ITEMS_FILES",
                  "Value.$": "States.JsonToString($.order_items_files)"
                },
                {
                  "Name": "BATCH_ID",
                  "Value.$": "$.batch_id"
                }
              ]
            }
          ]
        }
      },
      "ResultPath": "$.transformation_result",
      "TimeoutSeconds": 3600,
      "Retry": [
        {
          "ErrorEquals": [
            "States.TaskFailed"
          ],
          "IntervalSeconds": 60,
          "MaxAttempts": 2,
          "BackoffRate": 2
        },
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "IntervalSeconds": 10,
          "MaxAttempts": 1
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "Next": "NotifyTransformationFailure",
          "ResultPath": "$.error"
        }
      ],
      "Next": "ArchiveProcessedFiles"
    },
    "ArchiveProcessedFiles": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "ecommerce-file-archiver",
        "Payload": {
          "products_files.$": "$.products_files",
          "orders_files.$": "$.orders_files",
          "order_items_files.$": "$.order_items_files",
          "batch_id.$": "$.batch_id",
          "status": "SUCCESS"
        }
      },
      "TimeoutSeconds": 300,
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException"
          ],
          "IntervalSeconds": 10,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "Next": "NotifyArchivalFailure",
          "ResultPath": "$.error"
        }
      ],
      "Next": "NotifyPipelineSuccess"
    },
    "NotifyValidationFailure": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sns:publish",
      "Parameters": {
        "TopicArn": "arn:aws:sns:us-east-1:499648498289:ecommerce-pipeline-alerts",
        "Subject": "üö® E-commerce Pipeline: Validation Failed",
        "Message": "‚ùå VALIDATION FAILURE\n\nError Details:\nValidation failed during data processing.\n\nPlease check CloudWatch logs for detailed information."
      },
      "Next": "MarkFilesAsFailed"
    },
    "NotifyTransformationFailure": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sns:publish",
      "Parameters": {
        "TopicArn": "arn:aws:sns:us-east-1:499648498289:ecommerce-pipeline-alerts",
        "Subject": "üö® E-commerce Pipeline: Transformation Failed",
        "Message": "‚ùå TRANSFORMATION FAILURE\n\nValidation was successful, but transformation failed.\n\nPlease check CloudWatch logs and DynamoDB for detailed information."
      },
      "Next": "MarkFilesAsFailed"
    },
    "NotifyArchivalFailure": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sns:publish",
      "Parameters": {
        "TopicArn": "arn:aws:sns:us-east-1:499648498289:ecommerce-pipeline-alerts",
        "Subject": "‚ö†Ô∏è E-commerce Pipeline: Archival Failed",
        "Message": "‚ö†Ô∏è ARCHIVAL FAILURE\n\nData processing was successful, but file archival failed.\nFiles may remain in raw-data directory.\n\nManual cleanup may be required."
      },
      "Next": "PipelinePartialSuccess"
    },
    "NotifyPipelineSuccess": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sns:publish",
      "Parameters": {
        "TopicArn": "arn:aws:sns:us-east-1:499648498289:ecommerce-pipeline-notifications",
        "Subject": "‚úÖ E-commerce Pipeline: Processing Complete",
        "Message": "‚úÖ PIPELINE SUCCESS\n\nüìä Processing Summary:\n‚Ä¢ Validation: Completed\n‚Ä¢ Transformation: Completed\n‚Ä¢ KPIs stored in DynamoDB\n‚Ä¢ Files archived successfully\n\nPipeline completed successfully."
      },
      "Next": "PipelineSuccess"
    },
    "MarkFilesAsFailed": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "ecommerce-file-archiver",
        "Payload": {
          "products_files.$": "$.products_files",
          "orders_files.$": "$.orders_files",
          "order_items_files.$": "$.order_items_files",
          "batch_id.$": "$.batch_id",
          "status": "FAILED",
          "error.$": "$.error"
        }
      },
      "TimeoutSeconds": 300,
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException"
          ],
          "IntervalSeconds": 10,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "Next": "PipelineFailed"
        }
      ],
      "Next": "PipelineFailed"
    },
    "PipelineSuccess": {
      "Type": "Succeed",
      "Comment": "Data pipeline completed successfully with notifications sent"
    },
    "PipelinePartialSuccess": {
      "Type": "Succeed",
      "Comment": "Data processing completed but archival failed - manual intervention may be required"
    },
    "PipelineFailed": {
      "Type": "Fail",
      "Cause": "Data pipeline failed with notifications sent",
      "Error": "PipelineError"
    }
  }
}